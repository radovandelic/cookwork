import { Kitchen } from '.'
import { User } from '../user'

let user, kitchen

beforeEach(async () => {
  user = await User.create({ email: 'a@a.com', password: '123456' })
  kitchen = await Kitchen.create({ user, name: 'test', phone: 'test', description: 'test', type: 'test', address: 'test', size: 'test', AFSCA: 'test', VAT: 'test', hours: 'test', capacity: 'test', price: 'test', rent: 'test', equipment: 'test', staff: 'test', cancellation: 'test', events: 'test', standingCapacity: 'test', sittingCapacity: 'test' })
})

describe('view', () => {
  it('returns simple view', () => {
    const view = kitchen.view()
    expect(typeof view).toBe('object')
    expect(view.id).toBe(kitchen.id)
    expect(typeof view.user).toBe('object')
    expect(view.user.id).toBe(user.id)
    expect(view.name).toBe(kitchen.name)
    expect(view.phone).toBe(kitchen.phone)
    expect(view.description).toBe(kitchen.description)
    expect(view.type).toBe(kitchen.type)
    expect(view.address).toBe(kitchen.address)
    expect(view.size).toBe(kitchen.size)
    expect(view.AFSCA).toBe(kitchen.AFSCA)
    expect(view.VAT).toBe(kitchen.VAT)
    expect(view.hours).toBe(kitchen.hours)
    expect(view.capacity).toBe(kitchen.capacity)
    expect(view.price).toBe(kitchen.price)
    expect(view.rent).toBe(kitchen.rent)
    expect(view.equipment).toBe(kitchen.equipment)
    expect(view.staff).toBe(kitchen.staff)
    expect(view.cancellation).toBe(kitchen.cancellation)
    expect(view.events).toBe(kitchen.events)
    expect(view.standingCapacity).toBe(kitchen.standingCapacity)
    expect(view.sittingCapacity).toBe(kitchen.sittingCapacity)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })

  it('returns full view', () => {
    const view = kitchen.view(true)
    expect(typeof view).toBe('object')
    expect(view.id).toBe(kitchen.id)
    expect(typeof view.user).toBe('object')
    expect(view.user.id).toBe(user.id)
    expect(view.name).toBe(kitchen.name)
    expect(view.phone).toBe(kitchen.phone)
    expect(view.description).toBe(kitchen.description)
    expect(view.type).toBe(kitchen.type)
    expect(view.address).toBe(kitchen.address)
    expect(view.size).toBe(kitchen.size)
    expect(view.AFSCA).toBe(kitchen.AFSCA)
    expect(view.VAT).toBe(kitchen.VAT)
    expect(view.hours).toBe(kitchen.hours)
    expect(view.capacity).toBe(kitchen.capacity)
    expect(view.price).toBe(kitchen.price)
    expect(view.rent).toBe(kitchen.rent)
    expect(view.equipment).toBe(kitchen.equipment)
    expect(view.staff).toBe(kitchen.staff)
    expect(view.cancellation).toBe(kitchen.cancellation)
    expect(view.events).toBe(kitchen.events)
    expect(view.standingCapacity).toBe(kitchen.standingCapacity)
    expect(view.sittingCapacity).toBe(kitchen.sittingCapacity)
    expect(view.createdAt).toBeTruthy()
    expect(view.updatedAt).toBeTruthy()
  })
})
